name: ci

on: [push, pull_request]

jobs:
  ci:
    name: ci
    runs-on: macos-13
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install requirements
        run: |
          # 安装Homebrew
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          echo "$(/opt/homebrew/bin/brew shellenv)" >> $GITHUB_ENV
          source $GITHUB_ENV

          # 安装指定版本工具
          brew install cmake@3.27 ninja@1.11 go@1.21 nasm

          # 链接版本化工具
          brew link --force cmake@3.27 ninja@1.11 go@1.21

          # 安装指定版本Meson
          pip3 install meson==1.2.1

          # 验证工具版本
          echo "CLANG_VERSION=$(clang --version | head -n1)" >> $GITHUB_ENV
          echo "CMAKE_VERSION=$(cmake --version | head -n1)" >> $GITHUB_ENV
          echo "GO_VERSION=$(go version)" >> $GITHUB_ENV
          echo "MESON_VERSION=$(meson --version)" >> $GITHUB_ENV
          echo "NASM_VERSION=$(nasm -v | head -n1)" >> $GITHUB_ENV
          echo "NINJA_VERSION=$(ninja --version)" >> $GITHUB_ENV

      - name: Print tool versions
        run: |
          echo "Clang: $CLANG_VERSION"
          echo "CMake: $CMAKE_VERSION"
          echo "Go: $GO_VERSION"
          echo "Meson: $MESON_VERSION"
          echo "NASM: $NASM_VERSION"
          echo "Ninja: $NINJA_VERSION"

      - name: Determine version
        id: version
        run: |
          case "${GITHUB_REF}" in
          refs/tags/*)
            VERSION=${GITHUB_REF#refs/tags/}
            ;;
          *)
            VERSION=develop
            ;;
          esac

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo ${VERSION}

      - name: Build
        run: |
          VERSION=${{ steps.version.outputs.version }}
          # 使用并行构建加速
          make -j$(sysctl -n hw.ncpu) build/output/libmpv-libs_${VERSION}_ios-arm64-audio-default.tar.gz \
            build/output/libmpv-libs_${VERSION}_ios-arm64-video-default.tar.gz \
            build/output/libmpv-libs_${VERSION}_iossimulator-universal-audio-default.tar.gz \
            build/output/libmpv-libs_${VERSION}_iossimulator-universal-video-default.tar.gz \
            build/output/libmpv-libs_${VERSION}_macos-universal-audio-default.tar.gz \
            build/output/libmpv-libs_${VERSION}_macos-universal-video-default.tar.gz \
            build/output/libmpv-xcframeworks_${VERSION}_ios-universal-audio-default.tar.gz \
            build/output/libmpv-xcframeworks_${VERSION}_ios-universal-video-default.tar.gz \
            build/output/libmpv-xcframeworks_${VERSION}_macos-universal-audio-default.tar.gz \
            build/output/libmpv-xcframeworks_${VERSION}_macos-universal-video-default.tar.gz \
            build/output/debug.zip

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          path: |
            build/output/debug.zip
            build/output/*.tar.gz

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          fail_on_unmatched_files: true
          files: |
            build/output/debug.zip
            build/output/*.tar.gz